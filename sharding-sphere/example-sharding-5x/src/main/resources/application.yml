spring:
  application:
    name: sharding-sphere

  shardingsphere:
    # 开启
    enabled: true
    # 分片, 多数据源配置
    datasource:
      # 对两个 datasource 分别取名
      names: default,db0,db1

      # 默认的 DataSource, 不进行分表分表
      # 用于存放一些公共的表
      default:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        username: root
        password:
        jdbc-url: jdbc:mysql://localhost:3306/db0?serverTimezone=GMT%2B8

      # 用来进行分库的 DataSource
      db0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        username: root
        password:
        jdbc-url: jdbc:mysql://localhost:3306/db1?serverTimezone=GMT%2B8
      db1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        username: root
        password:
        jdbc-url: jdbc:mysql://localhost:3306/db2?serverTimezone=GMT%2B8

    rules:
      # 分片规则
      sharding:
        # 默认情况下不分表和分表
        default-database-strategy:
          none:
        default-table-strategy:
          none:

        # 表级别规则的相关配置
        tables:
          t_common_config:
            actual-data-nodes: default.t_common_config

          # `t_user` 表的规则
          t_user:
            actual-data-nodes: db${0..1}.t_user
            # 主键生成的策略, 这里使用雪花算法
            key-generate-strategy:
              column: id
              key-generator-name: snowflake
            # 分库策略
            database-strategy:
              standard:
                # 按照 ID 进行分片
                sharding-column: id
                # 分片的算法
                sharding-algorithm-name: user-database-precise-sharding-algorithm

          # `t_order` 表的规则
          t_order:
            # 数据存储的范围
            actual-data-nodes: db${0..1}.t_order_${0..2}
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: order-database-precise-sharding-algorithm
            # 分表策略
            table-strategy:
              standard:
                # 按照 order_num 进行分片
                sharding-column: order_num
                # 分片的算法
                sharding-algorithm-name: order-table-precise-sharding-algorithm

          # `t_post` 表的规则
          t_post:
            actual-data-nodes: db${0..1}.t_post
            # 主键生成的策略, 这里使用雪花算法
            key-generate-strategy:
              column: id
              key-generator-name: snowflake
            database-strategy:
              hint:
                sharding-algorithm-name: post-database-hint-sharding-algorithm

        # 5.x 需要在这里定义分片算法 sharding algorithms 以及键生成器 key generators
        # 注意：策略名称不可以使用驼峰命名。会导致读取不到props属性
        sharding-algorithms:
          user-database-precise-sharding-algorithm:
            type: UserDatabasePreciseShardingAlgorithm
          order-database-precise-sharding-algorithm:
            type: OrderDatabasePreciseShardingAlgorithm
          order-table-precise-sharding-algorithm:
            type: OrderTablePreciseShardingAlgorithm
          post-database-hint-sharding-algorithm:
            type: PostDatabaseHintShardingAlgorithm

        key-generators:
          snowflake:
            type: SNOWFLAKE

    # 额外的属性
    props:
      # 展示真实的查询 SQL
      sql.show: true

logging:
  level:
    # 开启 jooq 的 SQL
    org.jooq.tools.LoggerListener: DEBUG
